#!/bin/bash

# Script to create a .env file for PeerCrypt

# Default values
DEFAULT_MODE="aimd"
GOSSIP_INTERVAL="5.0"
DISABLE_GOSSIP="false"
AIMD_WINDOW="32"
AIMD_MIN_WINDOW="8"
AIMD_MAX_WINDOW="128"
PARALLEL_THREADS="4"

# Print header
echo "PeerCrypt Environment Setup"
echo "==========================="
echo "This script will create a .env file for Docker Compose."
echo ""

# Ask for user input
read -p "Transfer mode [aimd]: " input_mode
DEFAULT_MODE=${input_mode:-$DEFAULT_MODE}

read -p "Gossip interval in seconds [5.0]: " input_interval
GOSSIP_INTERVAL=${input_interval:-$GOSSIP_INTERVAL}

read -p "Disable gossip on startup? (true/false) [false]: " input_disable
DISABLE_GOSSIP=${input_disable:-$DISABLE_GOSSIP}

read -p "AIMD window size in KB [32]: " input_window
AIMD_WINDOW=${input_window:-$AIMD_WINDOW}

read -p "AIMD minimum window size in KB [8]: " input_min
AIMD_MIN_WINDOW=${input_min:-$AIMD_MIN_WINDOW}

read -p "AIMD maximum window size in KB [128]: " input_max
AIMD_MAX_WINDOW=${input_max:-$AIMD_MAX_WINDOW}

read -p "Parallel mode threads [4]: " input_threads
PARALLEL_THREADS=${input_threads:-$PARALLEL_THREADS}

# Create the .env file
cat > .env << EOF
# PeerCrypt Environment Variables
# Generated by create_env.sh

# Transfer mode configuration
# Options: normal, token-bucket, aimd, qos, parallel, multicast
DEFAULT_MODE=${DEFAULT_MODE}

# Network discovery configuration
GOSSIP_INTERVAL=${GOSSIP_INTERVAL}

# Gossip-based peer discovery on startup
DISABLE_GOSSIP=${DISABLE_GOSSIP}

# Advanced AIMD congestion control (for aimd mode)
AIMD_WINDOW=${AIMD_WINDOW}
AIMD_MIN_WINDOW=${AIMD_MIN_WINDOW}
AIMD_MAX_WINDOW=${AIMD_MAX_WINDOW}

# Parallel mode configuration
PARALLEL_THREADS=${PARALLEL_THREADS}
EOF

chmod 600 .env

echo ""
echo "Successfully created .env file with the following settings:"
echo ""
cat .env
echo ""
echo "You can now run 'docker-compose up -d' to start PeerCrypt." 